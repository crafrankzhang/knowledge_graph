{"edges": [{"content": "", "source": "数据结构", "relation": "包含", "target": "栈", "label": "relation"}, {"content": "", "source": "数据结构", "relation": "包含", "target": "堆", "label": "relation"}, {"content": "", "source": "数据结构", "relation": "包含", "target": "队列", "label": "relation"}, {"content": "", "source": "数据结构", "relation": "包含", "target": "树", "label": "relation"}, {"content": "", "source": "数据结构", "relation": "包含", "target": "排序", "label": "relation"}, {"content": "", "source": "数据结构", "relation": "包含", "target": "递归", "label": "relation"}, {"content": "", "source": "数据结构", "relation": "包含", "target": "链表", "label": "relation"}, {"content": "", "source": "数据结构", "relation": "包含", "target": "哈希", "label": "relation"}, {"content": "", "source": "数据结构", "relation": "包含", "target": "数组", "label": "relation"}, {"content": "", "source": "数据结构", "relation": "包含", "target": "图", "label": "relation"}], "secondary_edges": [{"source": "栈", "relation": "先导知识", "target": "数组", "label": "propertymid"}, {"source": "栈", "relation": "后续知识", "target": "链表", "label": "propertymid"}, {"source": "栈", "relation": "简介", "target": "栈（stack）又名堆栈，它是一种运算受限的线性表。其限制是仅允许在表的一端进行插入和删除运算。", "label": "propertymax"}, {"source": "栈", "relation": "索引", "target": "600079", "label": "propertymin"}, {"source": "堆", "relation": "先导知识", "target": "树 数组", "label": "propertymid"}, {"source": "堆", "relation": "后续知识", "target": "高级排序 优先级队列", "label": "propertymid"}, {"source": "堆", "relation": "简介", "target": "堆通常是一个可以被看做一颗树的数组对象", "label": "propertymax"}, {"source": "堆", "relation": "索引", "target": "002433", "label": "propertymin"}, {"source": "队列", "relation": "先导知识", "target": "数组", "label": "propertymid"}, {"source": "队列", "relation": "简介", "target": "队列是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。", "label": "propertymax"}, {"source": "队列", "relation": "索引", "target": "300199", "label": "propertymin"}, {"source": "树", "relation": "先导知识", "target": "链表", "label": "propertymid"}, {"source": "树", "relation": "简介", "target": "树状图是一种数据结构，它是由n（n>=1）个有限节点组成一个具有层次关系的集合。把它叫做“树”是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。", "label": "propertymax"}, {"source": "树", "relation": "索引", "target": "002007", "label": "propertymin"}, {"source": "排序", "relation": "先导知识", "target": "数组", "label": "propertymid"}, {"source": "排序", "relation": "简介", "target": "排序是计算机内经常进行的一种操作，其目的是将一组“无序”的记录序列调整为“有序”的记录序列。", "label": "propertymax"}, {"source": "排序", "relation": "索引", "target": "603669", "label": "propertymin"}, {"source": "递归", "relation": "先导知识", "target": " ", "label": "propertymid"}, {"source": "递归", "relation": "简介", "target": "程序调用自身的编程技巧称为递归（ recursion）。", "label": "propertymax"}, {"source": "递归", "relation": "索引", "target": "000518", "label": "propertymin"}, {"source": "链表", "relation": "先导知识", "target": " ", "label": "propertymid"}, {"source": "链表", "relation": "后续知识", "target": "栈 队列 树 图", "label": "propertymid"}, {"source": "链表", "relation": "简介", "target": "链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。", "label": "propertymax"}, {"source": "链表", "relation": "索引", "target": "600285", "label": "propertymin"}, {"source": "哈希", "relation": "先导知识", "target": "", "label": "propertymid"}, {"source": "哈希", "relation": "简介", "target": "散列表（Hash table，也叫哈希表），是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。", "label": "propertymax"}, {"source": "哈希", "relation": "索引", "target": "002219", "label": "propertymin"}, {"source": "数组", "relation": "先导知识", "target": " ", "label": "propertymid"}, {"source": "数组", "relation": "后续知识", "target": "栈 队列 排序 哈希", "label": "propertymid"}, {"source": "数组", "relation": "简介", "target": "所谓数组，是有序的元素序列。 [1]  若将有限个类型相同的变量的集合命名，那么这个名称为数组名。组成数组的各个变量称为数组的分量，也称为数组的元素，有时也称为下标变量。 ", "label": "propertymax"}, {"source": "数组", "relation": "索引", "target": "300436 ", "label": "propertymin"}, {"source": "图", "relation": "先导知识", "target": "链表 ", "label": "propertymid"}, {"source": "图", "relation": "简介", "target": "图形数据结构主要研究形状和图形数据元素之间的关系，它主要谈论几何形体在计算机内部的表示以及期间进行运算的基本方法。“算法+数据结构=程序”来说明数据结构在程序设计中所占的重要位置。", "label": "propertymax"}, {"source": "图", "relation": "索引", "target": "300363", "label": "propertymin"}]}